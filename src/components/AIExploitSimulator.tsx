import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Zap, 
  Brain, 
  AlertTriangle, 
  TrendingUp, 
  Play, 
  Pause, 
  Target,
  Shield,
  Activity,
  Coins
} from 'lucide-react';

interface AttackVector {
  id: string;
  name: string;
  category: string;
  riskLevel: number;
  gasImpact: number;
  status: 'pending' | 'running' | 'success' | 'failed';
}

interface VulnerabilityResult {
  vector: string;
  type: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  impact: number;
  gasUsed: number;
  description: string;
}

interface SimulationStats {
  totalVectors: number;
  completed: number;
  successfulAttacks: number;
  criticalVulns: number;
  estimatedLoss: number;
}

export function AIExploitSimulator() {
  const [isRunning, setIsRunning] = useState(false);
  const [contractAddress, setContractAddress] = useState('sei1j5k2m8p4q7w9x2...5ha2');
  const [progress, setProgress] = useState(0);
  const [currentVector, setCurrentVector] = useState('');
  const [stats, setStats] = useState<SimulationStats>({
    totalVectors: 10247,
    completed: 0,
    successfulAttacks: 0,
    criticalVulns: 0,
    estimatedLoss: 0
  });

  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityResult[]>([
    {
      vector: 'SEI-PARALLEL DRAIN',
      type: 'FLASH_LOAN',
      severity: 'critical',
      impact: 12450.0,
      gasUsed: 847392,
      description: 'Parallel flash loan exploitation targeting Sei\'s concurrent execution'
    },
    {
      vector: 'FRONT-RUNNER\'S DELIGHT',
      type: 'FRONT_RUN',
      severity: 'high',
      impact: 8720.5,
      gasUsed: 156284,
      description: 'Sub-400ms front-running attack exploiting Sei\'s block finality'
    },
    {
      vector: 'REENTRANCY CASCADE',
      type: 'REENTRANCY',
      severity: 'high',
      impact: 5340.8,
      gasUsed: 234567,
      description: 'Multi-level reentrancy with parallel execution conflicts'
    },
    {
      vector: 'GAS GRIEFING TSUNAMI',
      type: 'GAS_MANIPULATION',
      severity: 'medium',
      impact: 2150.3,
      gasUsed: 1234567,
      description: 'Gas limit exploitation targeting Sei\'s 30M gas/second throughput'
    }
  ]);

  const [attackVectors] = useState<AttackVector[]>([
    { id: '1', name: 'Flash Loan Surge', category: 'DeFi', riskLevel: 9, gasImpact: 500000, status: 'pending' },
    { id: '2', name: 'Parallel Reentrancy', category: 'Sei-Specific', riskLevel: 8, gasImpact: 200000, status: 'pending' },
    { id: '3', name: 'MEV Front-Running', category: 'MEV', riskLevel: 7, gasImpact: 150000, status: 'pending' },
    { id: '4', name: 'Oracle Manipulation', category: 'Price Feed', riskLevel: 9, gasImpact: 300000, status: 'pending' },
    { id: '5', name: 'Governance Exploit', category: 'DAO', riskLevel: 6, gasImpact: 100000, status: 'pending' }
  ]);

  // Simulate attack execution
  useEffect(() => {
    if (!isRunning) return;

    const interval = setInterval(() => {
      setProgress(prev => {
        const newProgress = Math.min(prev + 0.5, 100);
        
        // Update current vector
        const vectorIndex = Math.floor((newProgress / 100) * attackVectors.length);
        if (vectorIndex < attackVectors.length) {
          setCurrentVector(attackVectors[vectorIndex].name);
        }

        // Update stats
        setStats(prevStats => ({
          ...prevStats,
          completed: Math.floor((newProgress / 100) * prevStats.totalVectors),
          successfulAttacks: Math.floor((newProgress / 100) * 23),
          criticalVulns: Math.floor((newProgress / 100) * 4),
          estimatedLoss: (newProgress / 100) * 28661.6
        }));

        // Auto-complete simulation
        if (newProgress >= 100) {
          setIsRunning(false);
          setCurrentVector('Simulation Complete');
        }

        return newProgress;
      });
    }, 100);

    return () => clearInterval(interval);
  }, [isRunning, attackVectors]);

  const startSimulation = () => {
    setIsRunning(true);
    setProgress(0);
    setStats(prev => ({ ...prev, completed: 0, successfulAttacks: 0, criticalVulns: 0, estimatedLoss: 0 }));
  };

  const pauseSimulation = () => {
    setIsRunning(false);
  };

  const getSeverityColor = (severity: VulnerabilityResult['severity']) => {
    switch (severity) {
      case 'critical': return 'destructive';
      case 'high': return 'destructive';
      case 'medium': return 'default';
      case 'low': return 'secondary';
      default: return 'outline';
    }
  };

  const getRiskColor = (risk: number) => {
    if (risk >= 8) return 'text-destructive';
    if (risk >= 6) return 'text-yellow-500';
    return 'text-green-500';
  };

  return (
    <div className="space-y-6">
      {/* Simulator Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Brain className="h-5 w-5 text-primary" />
              AI Exploit Simulator
            </CardTitle>
            <Badge variant="outline" className="text-xs">
              v2.1.0 â€¢ Sei Optimized
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="contract">Target Contract</Label>
              <Input
                id="contract"
                value={contractAddress}
                onChange={(e) => setContractAddress(e.target.value)}
                placeholder="Enter Sei contract address..."
              />
            </div>
            <div className="flex items-end gap-2">
              <Button
                onClick={startSimulation}
                disabled={isRunning}
                className="flex-1"
              >
                <Play className="h-4 w-4 mr-2" />
                Start Simulation
              </Button>
              <Button
                variant="outline"
                onClick={pauseSimulation}
                disabled={!isRunning}
              >
                <Pause className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* Progress Indicator */}
          {(progress > 0 || isRunning) && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Running: {currentVector}</span>
                <span>{Math.round(progress)}%</span>
              </div>
              <Progress value={progress} className="h-2" />
              <div className="text-xs text-muted-foreground">
                Testing {stats.totalVectors.toLocaleString()} attack vectors with AI-generated Sei exploits
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Tabs defaultValue="stats" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="stats">Statistics</TabsTrigger>
          <TabsTrigger value="vectors">Attack Vectors</TabsTrigger>
          <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
          <TabsTrigger value="flashloan">Flash Loans</TabsTrigger>
        </TabsList>

        <TabsContent value="stats" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center gap-2">
                  <Target className="h-4 w-4 text-primary" />
                  <div>
                    <p className="text-sm font-medium">Vectors Tested</p>
                    <p className="text-2xl font-bold">{stats.completed.toLocaleString()}</p>
                    <p className="text-xs text-muted-foreground">of {stats.totalVectors.toLocaleString()}</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center gap-2">
                  <Zap className="h-4 w-4 text-destructive" />
                  <div>
                    <p className="text-sm font-medium">Successful Attacks</p>
                    <p className="text-2xl font-bold text-destructive">{stats.successfulAttacks}</p>
                    <p className="text-xs text-muted-foreground">exploitable vulnerabilities</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center gap-2">
                  <AlertTriangle className="h-4 w-4 text-destructive" />
                  <div>
                    <p className="text-sm font-medium">Critical Vulnerabilities</p>
                    <p className="text-2xl font-bold text-destructive">{stats.criticalVulns}</p>
                    <p className="text-xs text-muted-foreground">immediate attention required</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="flex items-center gap-2">
                  <Coins className="h-4 w-4 text-destructive" />
                  <div>
                    <p className="text-sm font-medium">Estimated Loss</p>
                    <p className="text-2xl font-bold text-destructive">${stats.estimatedLoss.toFixed(0)}</p>
                    <p className="text-xs text-muted-foreground">potential impact</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="vectors" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Attack Vector Categories</CardTitle>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-80">
                <div className="space-y-3">
                  {attackVectors.map((vector) => (
                    <div key={vector.id} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <h4 className="font-medium">{vector.name}</h4>
                          <Badge variant="outline">{vector.category}</Badge>
                        </div>
                        <div className="flex items-center gap-4 mt-2 text-sm text-muted-foreground">
                          <span>Risk: <span className={getRiskColor(vector.riskLevel)}>{vector.riskLevel}/10</span></span>
                          <span>Gas Impact: {vector.gasImpact.toLocaleString()}</span>
                        </div>
                      </div>
                      <Badge variant={vector.status === 'success' ? 'destructive' : 'secondary'}>
                        {vector.status}
                      </Badge>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="vulnerabilities" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Discovered Vulnerabilities</CardTitle>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-80">
                <div className="space-y-3">
                  {vulnerabilities.map((vuln, index) => (
                    <div key={index} className="p-3 border rounded-lg space-y-2">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <Badge variant={getSeverityColor(vuln.severity)}>
                            {vuln.severity.toUpperCase()}
                          </Badge>
                          <span className="font-medium">{vuln.vector}</span>
                        </div>
                        <Badge variant="outline">{vuln.type}</Badge>
                      </div>
                      <p className="text-sm text-muted-foreground">{vuln.description}</p>
                      <div className="flex items-center gap-4 text-xs text-muted-foreground">
                        <span>Impact: ${vuln.impact.toFixed(2)}</span>
                        <span>Gas Used: {vuln.gasUsed.toLocaleString()}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="flashloan" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5" />
                Flash Loan Surge Analysis
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div className="text-center p-4 rounded-lg bg-muted">
                  <p className="text-sm font-medium">Parallel Loans Tested</p>
                  <p className="text-2xl font-bold">1,247</p>
                </div>
                <div className="text-center p-4 rounded-lg bg-muted">
                  <p className="text-sm font-medium">Max Surge Detected</p>
                  <p className="text-2xl font-bold text-destructive">$2.4M</p>
                </div>
                <div className="text-center p-4 rounded-lg bg-muted">
                  <p className="text-sm font-medium">Sei-Specific Exploits</p>
                  <p className="text-2xl font-bold">17</p>
                </div>
              </div>
              
              <div className="space-y-3">
                <div className="p-3 border rounded-lg">
                  <h4 className="font-medium flex items-center gap-2">
                    <Activity className="h-4 w-4" />
                    Parallel Flash Loan Cascade
                  </h4>
                  <p className="text-sm text-muted-foreground mt-1">
                    5 concurrent flash loans targeting same liquidity pool - potential $12.4k drain
                  </p>
                  <div className="mt-2">
                    <Progress value={87} className="h-2" />
                    <p className="text-xs text-muted-foreground mt-1">87% exploitation probability</p>
                  </div>
                </div>

                <div className="p-3 border rounded-lg">
                  <h4 className="font-medium flex items-center gap-2">
                    <Zap className="h-4 w-4" />
                    Sub-400ms Arbitrage Attack
                  </h4>
                  <p className="text-sm text-muted-foreground mt-1">
                    Exploiting Sei's fast finality for cross-DEX arbitrage manipulation
                  </p>
                  <div className="mt-2">
                    <Progress value={64} className="h-2" />
                    <p className="text-xs text-muted-foreground mt-1">64% exploitation probability</p>
                  </div>
                </div>

                <div className="p-3 border rounded-lg">
                  <h4 className="font-medium flex items-center gap-2">
                    <Shield className="h-4 w-4" />
                    Oracle Price Manipulation
                  </h4>
                  <p className="text-sm text-muted-foreground mt-1">
                    Large flash loan impacting oracle price feeds before liquidations
                  </p>
                  <div className="mt-2">
                    <Progress value={43} className="h-2" />
                    <p className="text-xs text-muted-foreground mt-1">43% exploitation probability</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}